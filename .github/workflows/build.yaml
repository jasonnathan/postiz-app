name: "Build and Push Docker Image"

on:
  push:
    branches:
      - main
    paths:
      - package.json
      - apps/**
      - '!apps/docs/**'
      - libraries/**
  pull_request:
    branches:
      - main
    paths:
      - package.json
      - apps/**
      - '!apps/docs/**'
      - libraries/**

jobs:
  # Step 1: Build the project
  build:
    runs-on: ubuntu-latest
    outputs:
      container_version: ${{ steps.set-container-version.outputs.container_version }}

    strategy:
      matrix:
        node-version: ['20.17.0']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            **/package-lock.json

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      - name: Archive built files
        run: tar --exclude='dist/apps/frontend/.next/cache' -czf dist-artifacts.tar.gz dist/ libraries/ node_modules/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.run_id }}
          path: dist-artifacts.tar.gz
          compression-level: 6
          overwrite: true

      - name: Set container version
        id: set-container-version
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          echo "container_version=${TIMESTAMP}" >> "$GITHUB_OUTPUT"

  # Step 2: Build and push Docker images
  build-and-push:
    needs: build
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts-${{ github.run_id }}

      - name: Extract build artifacts
        run: tar -xzf dist-artifacts.tar.gz

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: var/docker/Dockerfile
          push: true
          platforms: ${{ matrix.platform }}
          tags: |
            ghcr.io/jasonnathan/postiz-app:latest
            ghcr.io/jasonnathan/postiz-app:${{ needs.build.outputs.container_version }}-${{ matrix.platform | replace('/', '-') }}
            ghcr.io/jasonnathan/postiz-app:${{ needs.build.outputs.container_version }}

  # Step 3: Create a multi-architecture Docker manifest
  create-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push Docker manifest
        run: |
          docker manifest create \
            ghcr.io/jasonnathan/postiz-app:latest \
            ghcr.io/jasonnathan/postiz-app:${{ needs.build.outputs.container_version }}-linux-amd64 \
            ghcr.io/jasonnathan/postiz-app:${{ needs.build.outputs.container_version }}-linux-arm64
          docker manifest push ghcr.io/jasonnathan/postiz-app:latest
